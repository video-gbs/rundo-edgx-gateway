spring:
    application:
        name: rundo-media-dispatcher
    # REDIS数据库配置
    redis:
        # [必须修改] Redis服务器IP, REDIS安装在本机的,使用127.0.0.1
        host: 127.0.0.1
        # [必须修改] 端口号
        port: 6379
        # [可选] 数据库 DB
        database: 1
        # [可选] 访问密码,若你的redis服务器没有设置密码，就不需要用密码去连接
        password: rundoredis
        # [可选] 超时时间
        timeout: 10000
        # [可选] jdbc数据库配置, 项目使用sqlite作为数据库，一般不需要配置
        # mysql数据源
    datasource:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/rundo_media_dispatcher?useUnicode=true&characterEncoding=UTF8&rewriteBatchedStatements=true&serverTimezone=PRC&useSSL=false&allowMultiQueries=true
        username: root
        password: root123
        druid:
            initialSize: 10                       # 连接池初始化连接数
            maxActive: 200                        # 连接池最大连接数
            minIdle: 5                            # 连接池最小空闲连接数
            maxWait: 60000                        # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
            keepAlive: true                       # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
            validationQuery: select 1             # 检测连接是否有效sql，要求是查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
            testWhileIdle: true                   # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
            testOnBorrow: false                   # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
            testOnReturn: false                   # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
            poolPreparedStatements: false         # 是否開啟PSCache，並且指定每個連線上PSCache的大小
            timeBetweenEvictionRunsMillis: 60000  # 配置間隔多久才進行一次檢測，檢測需要關閉的空閒連線，單位是毫秒
            minEvictableIdleTimeMillis: 300000    # 配置一個連線在池中最小生存的時間，單位是毫秒
            filters: config,stat,slf4j             # 配置监控统计拦截的filters，监控统计用的filter:sta, 日志用的filter:log4j, 防御sql注入的filter:wall
            filter:
                wall:
                    config:
                        multi-statement-allow: true
            useGlobalDataSourceStat: true         # 合并多个DruidDataSource的监控数据
            # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
            connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=1000
            #stat-view-servlet.url-pattern: /admin/druid/*
    quartz:
        scheduler-name: rundo-utils-timer
        job-store-type: memory
        overwrite-existing-jobs: true
        jdbc:
            comment-prefix: #
            initialize-schema: never
        wait-for-jobs-to-complete-on-shutdown: true

    # rabbitmq 配置
    rabbitmq:
        host: 124.71.16.209
        port: 5672
        username: wvp
        password: wvp12345678
        publisher-returns: true      # 消息发送到交换机确认机制，是否确认回调
        #        publisher-confirm-type: correlated
        template:
            mandatory: true           #不可达消息是否回调,false时会忽略掉spring.rabbitmq.publisher-returns属性的值
        listener:
            simple:
                concurrency: 8            # 指定最小的消费者数量
                max-concurrency: 32       # 指定最大的消费者数量
                acknowledge-mode: manual  # 采用手动应答
                retry:
                    enabled: true           # 是否支持重试

    # druid管理监控页面的一些配置
rj-druid-manage:
    allow:                        # 访问druid监控页面的IP白名单
    deny: 192.168.1.100           # 访问druid监控页面IP黑名单
    loginUsername: rjAdmin          # 访问druid监控页面账号
    loginPassword: rj@2022     # 访问druid监控页面密码
    resetEnable: false            # 是否能够重置数据 禁用HTML页面上的“Reset All”功能

mybatis:
    configuration:
        mapUnderscoreToCamelCase: true
## [可选] WVP监听的HTTP端口, 网页和接口调用都是这个端口
server:
    port: 18081

#zlm 默认服务器配置
media:
    # [必须修改] zlm服务器唯一id，用于触发hook时区别是哪台服务器,general.mediaServerId
    id: LORVY158beilorvy
    # [必须修改] zlm服务器的内网IP
    ip: 172.20.0.93

    # [可选] 返回流地址时的ip，置空使用 media.ip
    stream-ip: 172.20.0.93
    # [可选] wvp在国标信令中使用的ip，此ip为摄像机可以访问到的ip， 置空使用 media.ip
    sdp-ip: 172.20.0.93
    # [可选] zlm服务器的hook所使用的IP, 默认使用sip.ip
    hook-ip: 172.20.0.93
    # [必须修改] zlm服务器的http.port
    http-port: 80


    # [必须修改] zlm服务器的http.port
    http-play-port: 80

    # [必须修改] zlm服务器的https.port--外网端口
    http-ssl-port: ${ZLM_PLAY-SSL-PORT:443}

    #zlm服务器的是否使用https
    enable-https: ${ENABLE_HTTPS:0}
    # [可选] zlm服务器的hook.admin_params=secret
    secret: RHI54kyNo62RhvY45KdOgeYzwl0qooHw

    play-protocal-type: 0
    # 启用多端口模式, 多端口模式使用端口区分每路流，兼容性更好。 单端口使用流的ssrc区分， 点播超时建议使用多端口测试
    rtp:
        # [可选] 是否启用多端口模式, 开启后会在portRange范围内选择端口用于媒体流传输
        enable: true
        # [可选] 在此范围内选择端口用于媒体流传输,
        port-range: 22000,22200 # 端口范围
        # [可选] 国标级联在此范围内选择端口发送媒体流,
        send-port-range: 22000,22200 # 端口范围
# [可选] 日志配置, 一般不需要改
logging:
    config: classpath:logback-spring-local.xml


response:
    exclude-url: "/v3/api-docs,/api/v1,/index/hook"

dispatcher-info:
    #   网关的唯一id
    serialNum: eb48104ddf2b4760be123783b3621041
    #a网关过期时间 默认3分钟
    expire: 180
gb28181-gateway-info:
    #   sip域 如有国标网关接入，请务必修改
    sipDomain: 4401020049


mq:
    enabled: true
    queue-data-list:
        #同平台能力层服务交互的mq
        - id: PUBLIC-GS
          routing-key: rundo.public.gs
          queue-name: rundo.public.gs
          exchange-id: PUBLIC
        #同平台能力层服务交互的mq
        - id: PUBLIC-SG
          routing-key: rundo.public.sg
          queue-name: rundo.public.sg
          exchange-id: PUBLIC
    exchange-data-list:
        - id: PUBLIC
          name: rundo.public
          type: topic
mq-defualt:
    public:
        # 服务队列监听
        queue-id-get: PUBLIC-GS
        # 服务队列发送
        queue-id-set: PUBLIC-SG

# [根据业务需求配置]
user-settings:
    # 推流直播是否录制
    record-push-live: true
    auto-apply-play: false
    # 点播等待超时时间,单位：毫秒
    play-timeout: 5000
    # 信令场景超时时间 单位：毫秒
    business-scene-timeout: 10000

    # 上级点播等待超时时间,单位：毫秒
    platform-play-timeout: 60000
    # 设备录像下载最大时间周期 30分钟
    device-download-time-cycle: 1800

mediaApi:
    #网关回调通知地址:
    callBackStreamNotify: "/api/media/streamNotify"
    streamRtpSendInfo: "/api/media/rtpSendInfo"
